# -*- coding: utf-8 -*-
"""Regresión lineal con sklearn y tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pxWT5b-wwJi3BC6VFMLg-MUSF39R4c1B
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
import numpy as np
import sklearn
from sklearn import linear_model
from sklearn.utils import shuffle

data = pd.read_csv("student-mat.csv", sep=";")
data2 = pd.read_csv("student-por.csv", sep=";")
print(data2.head())

data2 = data[[]]



data = data[["G1", "G2", "G3", "studytime", "failures", "absences"]]

print(data.head())

predict = "G3" #label

x = np.array(data.drop([predict], 1))
y = np.array(data[predict])

x_train, x_test , y_train, y_test = sklearn.model_selection.train_test_split(x, y, test_size = 0.1)

linear = linear_model.LinearRegression ()

linear.fit(x_train, y_train)
linear.score(x_test, y_test)
acc = linear.score(x_test, y_test)

print(acc)

print('Coefficient: \n', linear.coef_)
print('Intercept: \n', linear.intercept_)

import pathlib

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns

import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

column_names = ['G1', 'G2', 'G3', 'studytime', 'failures', 'absences']
raw_dataset = pd.read_csv("student-mat.csv", sep= ";")
dataset = data[column_names]
data.tail()

dataset.isna().sum



train_dataset = dataset.sample( frac=0.8, random_state=0)
test_dataset = dataset.drop( train_dataset.index)

sns.pairplot( train_dataset[['G1', 'G2', 'G3', 'studytime', 'failures', 'absences']])

train_stats = train_dataset.describe()
train_stats.pop("G3")
train_stats = train_stats.transpose()
train_stats

train_labels = train_dataset.pop("G3")
test_labels = test_dataset.pop("G3")

def norm(x):
  return (x - train_stats['mean']) / train_stats['std']
normed_train_data = norm(train_dataset)
normed_test_data = norm(test_dataset)
normed_test_data

def build_model():
  model = keras.Sequential([
    layers.Dense(64, activation='relu', input_shape=[len(train_dataset.keys())]), #Tienes una activación Relu
    layers.Dense(64, activation='relu'),
    layers.Dense(1) #Activación linear, esto es lo que queremos
  ])

  optimizer = tf.keras.optimizers.RMSprop(0.001) #RMS es el optimizador

  model.compile(loss='mse',
                optimizer=optimizer,
                metrics=['mae', 'mse']) #mse =mean square error, las metricas sirven para ver que tan bien nuestro modelo esta trabajando mae =mean absolute value
  return model

model = build_model()

model.summary()

example_batch = normed_train_data[:10]
example_result = model.predict(example_batch)
example_result

# Display training progress by printing a single dot for each completed epoch
class PrintDot(keras.callbacks.Callback): #plotea un punto para saber que esta procesando los datos
  def on_epoch_end(self, epoch, logs):
    if epoch % 100 == 0: print('')
    print('.', end='')

EPOCHS = 1000

history = model.fit(
  normed_train_data, train_labels,
  epochs=EPOCHS, validation_split = 0.2, verbose=0,
  callbacks=[PrintDot()])

hist = pd.DataFrame(history.history)
hist['epoch'] = history.epoch
hist.tail()

def plot_history(history):
  hist = pd.DataFrame(history.history)
  hist['epoch'] = history.epoch

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Abs Error [MPG]')
  plt.plot(hist['epoch'], hist['mae'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mae'],
           label = 'Val Error')
  plt.ylim([0,5])
  plt.legend()

  plt.figure()
  plt.xlabel('Epoch')
  plt.ylabel('Mean Square Error [$MPG^2$]')
  plt.plot(hist['epoch'], hist['mse'],
           label='Train Error')
  plt.plot(hist['epoch'], hist['val_mse'],
           label = 'Val Error')
  plt.ylim([0,20])
  plt.legend()
  plt.show()


plot_history(history)

model = build_model()

# The patience parameter is the amount of epochs to check for improvement
early_stop = keras.callbacks.EarlyStopping(monitor='val_loss', patience=10)

history = model.fit(normed_train_data, train_labels, epochs=EPOCHS,
                    validation_split = 0.2, verbose=0, callbacks=[early_stop, PrintDot()])

plot_history(history)

loss, mae, mse = model.evaluate(normed_test_data, test_labels, verbose=2)

print("Testing set Mean Abs Error: {:5.2f} G3".format(mae))

test_predictions = model.predict(normed_test_data).flatten()

plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [MPG]')
plt.ylabel('Predictions [MPG]')
plt.axis('equal')
plt.axis('square')
plt.xlim([0,plt.xlim()[1]])
plt.ylim([0,plt.ylim()[1]])
_ = plt.plot([-100, 100], [-100, 100])

error = test_predictions - test_labels
plt.hist(error, bins = 25)
plt.xlabel("Prediction Error [G3]")
_ = plt.ylabel("Count")